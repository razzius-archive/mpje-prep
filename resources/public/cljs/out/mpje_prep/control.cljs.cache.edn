{:rename-macros {}, :renames {}, :externs {document {getElementById {}}, Object {focus {}, value {}}}, :use-macros {lower-case clojure.string}, :excludes #{}, :name mpje-prep.control, :imports nil, :requires {clojure.string clojure.string}, :cljs.spec/speced-vars [], :uses {lower-case clojure.string}, :defs {questions {:name mpje-prep.control/questions, :file "/Users/razzi/projects/mpje-prep/src/mpje_prep/control.cljs", :line 4, :column 1, :end-line 4, :end-column 15, :meta {:file "/Users/razzi/projects/mpje-prep/src/mpje_prep/control.cljs", :line 4, :column 6, :end-line 4, :end-column 15}, :tag cljs.core/IVector}, start {:protocol-inline nil, :meta {:file "/Users/razzi/projects/mpje-prep/src/mpje_prep/control.cljs", :line 16, :column 7, :end-line 16, :end-column 12, :arglists (quote ([app-state]))}, :name mpje-prep.control/start, :variadic false, :file "/Users/razzi/projects/mpje-prep/src/mpje_prep/control.cljs", :end-column 12, :method-params ([app-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([app-state]))}, check-question {:protocol-inline nil, :meta {:file "/Users/razzi/projects/mpje-prep/src/mpje_prep/control.cljs", :line 22, :column 7, :end-line 22, :end-column 21, :arglists (quote ([app-state event]))}, :name mpje-prep.control/check-question, :variadic false, :file "/Users/razzi/projects/mpje-prep/src/mpje_prep/control.cljs", :end-column 21, :method-params ([app-state event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 2, :fn-var true, :arglists (quote ([app-state event]))}, next-question {:protocol-inline nil, :meta {:file "/Users/razzi/projects/mpje-prep/src/mpje_prep/control.cljs", :line 30, :column 7, :end-line 30, :end-column 20, :arglists (quote ([app-state]))}, :name mpje-prep.control/next-question, :variadic false, :file "/Users/razzi/projects/mpje-prep/src/mpje_prep/control.cljs", :end-column 20, :method-params ([app-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([app-state]))}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:question :other-options :note :answered :answer :correct}, :order [:question :answer :note :other-options :correct :answered]}, :doc nil}